{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-853534ac4bd6d5da.js","assets/js/signIn.js","node_modules/@parcel/runtime-js/lib/runtime-375312f4f380534d.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $6e8ce8261569ab33$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"earC1\\\",\\\"index.37e483dd.js\\\",\\\"b7sw5\\\",\\\"service-worker.2c89527d.js\\\",\\\"ht3zs\\\",\\\"index.5b4f745e.js\\\"]\"));\n\n\nvar $47Mwn = parcelRequire(\"47Mwn\");\n\nvar $6AR8M = parcelRequire(\"6AR8M\");\nconst $f9208ba5285f3f38$var$provider = new (0, $6AR8M.GoogleAuthProvider)();\nvar $dfc28a4cef0a91a0$exports = {};\n$dfc28a4cef0a91a0$exports = new URL(\"service-worker.2c89527d.js\", import.meta.url).toString();\n\n\nconst $f9208ba5285f3f38$var$sw = new URL($dfc28a4cef0a91a0$exports);\nif ('serviceWorker' in navigator) navigator.serviceWorker.register($f9208ba5285f3f38$var$sw.href, {\n    scope: '/budget-web-app/'\n}).then(()=>console.log('Service Worker Registered for scope:', $f9208ba5285f3f38$var$sw.href)).catch((err)=>console.error('Service Worker Error:', err));\nfunction $f9208ba5285f3f38$var$signIn() {\n    (0, $6AR8M.signInWithPopup)((0, $47Mwn.auth), $f9208ba5285f3f38$var$provider).then((result)=>{\n        const user = result.user;\n        localStorage.setItem(\"email\", JSON.stringify(user.email));\n        window.location.href = \"transactions.html\";\n    }).catch((error)=>{\n        console.error('Login Error:', error.message);\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const signInBttn = document.getElementById('googleLoginBtn');\n    if (signInBttn) signInBttn.addEventListener(\"click\", $f9208ba5285f3f38$var$signIn);\n    else console.error(\"Sign-in button not found.\");\n});\n//Biometric auth\n// Check if WebAuthn is supported\nconst $f9208ba5285f3f38$export$b48b2572c8b3a543 = ()=>{\n    return window.PublicKeyCredential && window.navigator.credentials && window.navigator.credentials.create;\n};\n// Convert ArrayBuffer to Base64 string\nconst $f9208ba5285f3f38$var$arrayBufferToBase64 = (buffer)=>{\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)));\n};\n// Convert Base64 string to ArrayBuffer\nconst $f9208ba5285f3f38$var$base64ToArrayBuffer = (base64)=>{\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for(let i = 0; i < binaryString.length; i++)bytes[i] = binaryString.charCodeAt(i);\n    return bytes.buffer;\n};\nclass $f9208ba5285f3f38$export$ae1320360e981535 {\n    constructor(){\n        this.biometricAuthBtn = document.getElementById('biometricAuthBtn');\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        if (this.biometricAuthBtn) this.biometricAuthBtn.addEventListener('click', ()=>this.authenticate());\n    }\n    async authenticate() {\n        if (!$f9208ba5285f3f38$export$b48b2572c8b3a543()) {\n            alert('Biometric authentication is not supported in this browser.');\n            return;\n        }\n        try {\n            // Check if user has registered credentials\n            const hasCredentials = localStorage.getItem('biometricCredentialId');\n            if (!hasCredentials) await this.register();\n            else await this.login();\n        } catch (error) {\n            console.error('Biometric authentication error:', error);\n            alert('Biometric authentication failed. Please try again.');\n        }\n    }\n    async register() {\n        try {\n            // Generate a random user ID\n            const userId = new Uint8Array(16);\n            crypto.getRandomValues(userId);\n            const publicKeyCredentialCreationOptions = {\n                challenge: new Uint8Array(32),\n                rp: {\n                    name: 'Budget Planner',\n                    id: window.location.hostname\n                },\n                user: {\n                    id: userId,\n                    name: 'user@example.com',\n                    displayName: 'Budget Planner User'\n                },\n                pubKeyCredParams: [\n                    {\n                        type: 'public-key',\n                        alg: -7 // ES256\n                    }\n                ],\n                authenticatorSelection: {\n                    authenticatorAttachment: 'platform',\n                    userVerification: 'required',\n                    requireResidentKey: false\n                },\n                timeout: 60000,\n                attestation: 'none'\n            };\n            // Generate challenge\n            crypto.getRandomValues(publicKeyCredentialCreationOptions.challenge);\n            // Create credentials\n            const credential = await navigator.credentials.create({\n                publicKey: publicKeyCredentialCreationOptions\n            });\n            // Store credential ID for future authentications\n            const credentialId = $f9208ba5285f3f38$var$arrayBufferToBase64(credential.rawId);\n            localStorage.setItem('biometricCredentialId', credentialId);\n            alert('Biometric registration successful!');\n            // Proceed with authentication\n            await this.login();\n        } catch (error) {\n            console.error('Registration error:', error);\n            alert('Biometric registration failed. Please try again.');\n        }\n    }\n    async login() {\n        try {\n            const credentialId = localStorage.getItem('biometricCredentialId');\n            if (!credentialId) throw new Error('No credentials found. Please register first.');\n            const challenge = new Uint8Array(32);\n            crypto.getRandomValues(challenge);\n            const publicKeyCredentialRequestOptions = {\n                challenge: challenge,\n                allowCredentials: [\n                    {\n                        type: 'public-key',\n                        id: $f9208ba5285f3f38$var$base64ToArrayBuffer(credentialId),\n                        transports: [\n                            'internal'\n                        ]\n                    }\n                ],\n                timeout: 60000,\n                userVerification: 'required'\n            };\n            const assertion = await navigator.credentials.get({\n                publicKey: publicKeyCredentialRequestOptions\n            });\n            if (assertion) // Authentication successful\n            this.onSuccessfulAuth();\n        } catch (error) {\n            console.error('Authentication error:', error);\n            alert('Biometric authentication failed. Please try again.');\n        }\n    }\n    onSuccessfulAuth() {\n        // Hide auth screen\n        const authScreen = document.getElementById('authScreen');\n        if (authScreen) authScreen.style.display = 'none';\n        // You can redirect to the main app or trigger other authentication flows here\n        alert('Successfully authenticated with biometrics!');\n    // Example: Redirect to main app\n    // window.location.href = '/app/dashboard.html';\n    }\n}\n// Initialize biometric authentication\nconst $f9208ba5285f3f38$var$biometricAuth = new $f9208ba5285f3f38$export$ae1320360e981535();\n\n\n//# sourceMappingURL=index.37e483dd.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"earC1\\\",\\\"index.37e483dd.js\\\",\\\"b7sw5\\\",\\\"service-worker.2c89527d.js\\\",\\\"ht3zs\\\",\\\"index.5b4f745e.js\\\"]\"));","import { auth } from \"./firebase.js\";\nimport { signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst provider = new GoogleAuthProvider();\n\n\nconst sw = new URL('service-worker.js', import.meta.url);\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register(sw.href, { scope: '/budget-web-app/' })\n        .then(() => console.log('Service Worker Registered for scope:', sw.href))\n        .catch(err => console.error('Service Worker Error:', err));\n}\n\nfunction signIn() {\n    signInWithPopup(auth, provider)\n        .then((result) => {\n            const user = result.user;\n            localStorage.setItem(\"email\", JSON.stringify(user.email));\n            window.location.href = \"transactions.html\";\n        })\n        .catch((error) => {\n            console.error('Login Error:', error.message);\n        });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const signInBttn = document.getElementById('googleLoginBtn');\n    if (signInBttn) {\n        signInBttn.addEventListener(\"click\", signIn);\n    } else {\n        console.error(\"Sign-in button not found.\");\n    }\n});\n\n//Biometric auth\n// Check if WebAuthn is supported\nconst isWebAuthnSupported = () => {\n    return window.PublicKeyCredential && \n           window.navigator.credentials && \n           window.navigator.credentials.create;\n  };\n  \n  // Convert ArrayBuffer to Base64 string\n  const arrayBufferToBase64 = (buffer) => {\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)));\n  };\n  \n  // Convert Base64 string to ArrayBuffer\n  const base64ToArrayBuffer = (base64) => {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  };\n  \n  class BiometricAuth {\n    constructor() {\n      this.biometricAuthBtn = document.getElementById('biometricAuthBtn');\n      this.setupEventListeners();\n    }\n  \n    setupEventListeners() {\n      if (this.biometricAuthBtn) {\n        this.biometricAuthBtn.addEventListener('click', () => this.authenticate());\n      }\n    }\n  \n    async authenticate() {\n      if (!isWebAuthnSupported()) {\n        alert('Biometric authentication is not supported in this browser.');\n        return;\n      }\n  \n      try {\n        // Check if user has registered credentials\n        const hasCredentials = localStorage.getItem('biometricCredentialId');\n        \n        if (!hasCredentials) {\n          await this.register();\n        } else {\n          await this.login();\n        }\n      } catch (error) {\n        console.error('Biometric authentication error:', error);\n        alert('Biometric authentication failed. Please try again.');\n      }\n    }\n  \n    async register() {\n      try {\n        // Generate a random user ID\n        const userId = new Uint8Array(16);\n        crypto.getRandomValues(userId);\n  \n        const publicKeyCredentialCreationOptions = {\n          challenge: new Uint8Array(32),\n          rp: {\n            name: 'Budget Planner',\n            id: window.location.hostname\n          },\n          user: {\n            id: userId,\n            name: 'user@example.com',\n            displayName: 'Budget Planner User'\n          },\n          pubKeyCredParams: [{\n            type: 'public-key',\n            alg: -7 // ES256\n          }],\n          authenticatorSelection: {\n            authenticatorAttachment: 'platform',\n            userVerification: 'required',\n            requireResidentKey: false\n          },\n          timeout: 60000,\n          attestation: 'none'\n        };\n  \n        // Generate challenge\n        crypto.getRandomValues(publicKeyCredentialCreationOptions.challenge);\n  \n        // Create credentials\n        const credential = await navigator.credentials.create({\n          publicKey: publicKeyCredentialCreationOptions\n        });\n  \n        // Store credential ID for future authentications\n        const credentialId = arrayBufferToBase64(credential.rawId);\n        localStorage.setItem('biometricCredentialId', credentialId);\n  \n        alert('Biometric registration successful!');\n        // Proceed with authentication\n        await this.login();\n  \n      } catch (error) {\n        console.error('Registration error:', error);\n        alert('Biometric registration failed. Please try again.');\n      }\n    }\n  \n    async login() {\n      try {\n        const credentialId = localStorage.getItem('biometricCredentialId');\n        if (!credentialId) {\n          throw new Error('No credentials found. Please register first.');\n        }\n  \n        const challenge = new Uint8Array(32);\n        crypto.getRandomValues(challenge);\n  \n        const publicKeyCredentialRequestOptions = {\n          challenge,\n          allowCredentials: [{\n            type: 'public-key',\n            id: base64ToArrayBuffer(credentialId),\n            transports: ['internal']\n          }],\n          timeout: 60000,\n          userVerification: 'required'\n        };\n  \n        const assertion = await navigator.credentials.get({\n          publicKey: publicKeyCredentialRequestOptions\n        });\n  \n        if (assertion) {\n          // Authentication successful\n          this.onSuccessfulAuth();\n        }\n  \n      } catch (error) {\n        console.error('Authentication error:', error);\n        alert('Biometric authentication failed. Please try again.');\n      }\n    }\n  \n    onSuccessfulAuth() {\n      // Hide auth screen\n      const authScreen = document.getElementById('authScreen');\n      if (authScreen) {\n        authScreen.style.display = 'none';\n      }\n  \n      // You can redirect to the main app or trigger other authentication flows here\n      alert('Successfully authenticated with biometrics!');\n      \n      // Example: Redirect to main app\n      // window.location.href = '/app/dashboard.html';\n    }\n  }\n  \n  // Initialize biometric authentication\n  const biometricAuth = new BiometricAuth();\n  \n  // Export for testing or external use\n  export { BiometricAuth, isWebAuthnSupported };","module.exports = new __parcel__URL__(\"service-worker.2c89527d.js\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$47Mwn","$6AR8M","$f9208ba5285f3f38$var$provider","GoogleAuthProvider","$dfc28a4cef0a91a0$exports","$f9208ba5285f3f38$var$sw","$f9208ba5285f3f38$var$signIn","signInWithPopup","auth","then","result","user","localStorage","setItem","stringify","email","window","location","href","catch","error","console","message","navigator","serviceWorker","scope","log","document","addEventListener","signInBttn","getElementById","$f9208ba5285f3f38$export$b48b2572c8b3a543","PublicKeyCredential","credentials","create","$f9208ba5285f3f38$var$arrayBufferToBase64","buffer","btoa","String","fromCharCode","Uint8Array","$f9208ba5285f3f38$var$base64ToArrayBuffer","base64","binaryString","atob","bytes","charCodeAt","constructor","biometricAuthBtn","setupEventListeners","authenticate","alert","getItem","login","userId","crypto","getRandomValues","publicKeyCredentialCreationOptions","challenge","rp","name","hostname","displayName","pubKeyCredParams","type","alg","authenticatorSelection","authenticatorAttachment","userVerification","requireResidentKey","timeout","attestation","credential","publicKey","credentialId","rawId","publicKeyCredentialRequestOptions","allowCredentials","transports","onSuccessfulAuth","authScreen","style","display"],"version":3,"file":"index.37e483dd.js.map"}